package com.daden.dadencloud.config;

import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.ValueMapper;
import org.apache.kafka.streams.StreamsBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

@Configuration
public class StreamConfig {

    private final StreamsBuilder streamsBuilder;

    public StreamConfig(StreamsBuilder streamsBuilder) {
        this.streamsBuilder = streamsBuilder;
    }

    @Bean
    public Supplier<KStream<String, String>> producerBinding() {
        return () -> streamsBuilder.stream("input-topic");
    }

    @Bean
    public Function<KStream<String, String>, KStream<String, String>> functionBinding() {
        return input -> input
            .mapValues((ValueMapper<String, String>) String::toUpperCase)
            .filter((key, value) -> value.contains("HELLO"));
    }

    @Bean
    public Consumer<KTable<String, String>> consumerBinding() {
        return table -> table.toStream()
            .foreach((key, value) -> System.out.println("Consumed: " + value));
    }
}